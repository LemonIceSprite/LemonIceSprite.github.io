<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wang Hemeng&#39;s page</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lemonicesprite.com/"/>
  <updated>2020-04-12T13:52:30.960Z</updated>
  <id>http://lemonicesprite.com/</id>
  
  <author>
    <name>Wang Hemeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言——指针与数组</title>
    <link href="http://lemonicesprite.com/2020/04/12/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/"/>
    <id>http://lemonicesprite.com/2020/04/12/C%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/</id>
    <published>2020-04-12T05:18:16.000Z</published>
    <updated>2020-04-12T13:52:30.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是数据类型？"><a href="#什么是数据类型？" class="headerlink" title="什么是数据类型？"></a>什么是数据类型？</h2><p>对于淳朴善良的计算机来说，形形色色的数据并没有什么不同，它只是简单的认识0和1而已。那么，在实际存储的时候，它又要怎么区分各种类型的数据呢？首先让我们来看一下，在C语言中，都有哪些数据类型。</p><blockquote><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。</p><p>C 中的类型可分为以下几种：</p><table><thead><tr><th align="left">序号</th><th align="left">类型与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>基本类型：</strong> 它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td align="left">2</td><td align="left"><strong>枚举类型：</strong> 它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td align="left">3</td><td align="left"><strong>void 类型：</strong> 类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型：</strong> 它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th></tr></thead><tbody><tr><td align="left">char</td><td align="left">1 字节</td><td align="left">-128 到 127 或 0 到 255</td></tr><tr><td align="left">unsigned char</td><td align="left">1 字节</td><td align="left">0 到 255</td></tr><tr><td align="left">signed char</td><td align="left">1 字节</td><td align="left">-128 到 127</td></tr><tr><td align="left">int</td><td align="left">2 或 4 字节</td><td align="left">-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned int</td><td align="left">2 或 4 字节</td><td align="left">0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td align="left">short</td><td align="left">2 字节</td><td align="left">-32,768 到 32,767</td></tr><tr><td align="left">unsigned short</td><td align="left">2 字节</td><td align="left">0 到 65,535</td></tr><tr><td align="left">long</td><td align="left">4 字节</td><td align="left">-2,147,483,648 到 2,147,483,647</td></tr><tr><td align="left">unsigned long</td><td align="left">4 字节</td><td align="left">0 到 4,294,967,295</td></tr></tbody></table><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th align="left">类型</th><th align="left">存储大小</th><th align="left">值范围</th><th align="left">精度</th></tr></thead><tbody><tr><td align="left">float</td><td align="left">4 字节</td><td align="left">1.2E-38 到 3.4E+38</td><td align="left">6 位小数</td></tr><tr><td align="left">double</td><td align="left">8 字节</td><td align="left">2.3E-308 到 1.7E+308</td><td align="left">15 位小数</td></tr><tr><td align="left">long double</td><td align="left">16 字节</td><td align="left">3.4E-4932 到 1.1E+4932</td><td align="left">19 位小数</td></tr></tbody></table><h3 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h3><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><table><thead><tr><th align="left">序号</th><th align="left">类型与描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>函数返回为空</strong> C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td align="left">2</td><td align="left"><strong>函数参数为空</strong> C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td align="left">3</td><td align="left"><strong>指针指向 void</strong> 类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 <strong>void *malloc( size_t size );</strong> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table></blockquote><h2 id="数据在内存中是怎么存储的呢？"><a href="#数据在内存中是怎么存储的呢？" class="headerlink" title="数据在内存中是怎么存储的呢？"></a>数据在内存中是怎么存储的呢？</h2><h3 id="非数组变量的存储方式"><a href="#非数组变量的存储方式" class="headerlink" title="非数组变量的存储方式"></a>非数组变量的存储方式</h3><p>当我们需要一个整数类型的变量是，我们通常会这么做：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>那么在实际的内存中，上面这句话的意思就是：</p><blockquote><p>喂？计算机是吧？那啥，我这需要一个int型的变量，给点地方，对就是4个字节，初始值给它赋个0，下次有人问你a在哪你就带它过去哦，别忘了！</p></blockquote><p>就这样，在程序运行时的内存中，就有这么一片地方叫a，它的数据类型时是int，以后只要是对a进行操作，计算机都会回到这个地方，进行相应的读写操作。</p><p>所有的非数组变量都是这么存储的，包括整数呀，浮点数呀，指针呀。没错，指针其实也是一个变量，只不过它存储的不是数值，而是地址，地址有什么用呢？往下看就知道了。</p><h3 id="数组变量的存储方式"><a href="#数组变量的存储方式" class="headerlink" title="数组变量的存储方式"></a>数组变量的存储方式</h3><p>那么如果我们需要一个数组是，我们应该怎么做呢？答案是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>];</span><br></pre></td></tr></table></figure><p>那么实际上这句话做了什么事情呢？应该是这样的：</p><blockquote><p>喂？没错又是我，这次需要的地方稍微大了点，给我六个int型变量需要的地方哦，要连续的，别给我分成散的。对了，记得把分配好的地方的首地址叫做a，免得人家以后找不到了。这次人家没说初始值是啥，你看着给就行。</p></blockquote><p>当我们需要一个数组时，计算机就要把所有的需要的内存一次性连续的分配好。当我们需要使用时，直接a[0] a[1] a[2] 的用就可以了。</p><h2 id="神奇的指针"><a href="#神奇的指针" class="headerlink" title="神奇的指针"></a>神奇的指针</h2><p>在计算机的世界里，大部分数据都有着各自的数学含义，但指针是个小小的例外。它存储着一种计算机独有的数据——地址。在许多高级语言中，程序员不可以直接对内存进行操作，比如想要访问a，就必须要告诉计算机我需要对a进行一些操作。但在C语言中，除了喊a的名字让计算机帮我找到它以外，还可以直接告诉计算机a的门牌号（地址），让计算机对地址所在的元素进行操作，不管它叫a还是叫b，直接操作就行。每种数据类型都有自己的地址，int型的指针是int *，float型的指针是float *，而int *的指针则是int **。</p><blockquote><p>直接利用地址对数据进行操作是有风险的。因为没有了聪明的计算机带路，程序员自己有可能会找错所需要的变量，甚至有可能会不小心对其他程序的变量进行了操作。就好比小明同学正在一边打游戏一边上网课，他本来想对队友说：“猥琐发育，别浪！”。但是粗心的程序员不小心写错了地址，结果这句话就被阴差阳错地发送到了网课的聊天窗口里边去了。这可不太好。</p></blockquote><h2 id="指针和数组的关系"><a href="#指针和数组的关系" class="headerlink" title="指针和数组的关系"></a>指针和数组的关系</h2><p>之前我们说过，想要访问数组中的元素是，直接用a[0] a[1]就可以访问了，那么有没有人会想，a是什么呢？眼尖的同学可能在刚才看到了，a实际上就是整个数组在内存中的起始地址，而地址正是用指针型的变量存储的。当我们想要访问a[2]时，计算机会先根据a里边的地址找到数据的起始位置，再根据指针所对应的数据类型进行2个单元（int型为4个字节）的偏移。</p><blockquote><p>计算机：哦～这会需要找a[2]，让我先看看a里边存的谁家的门牌号，找到了！是找谁来着？哦对a[2]，那就往后移动2个单位。我看看，一个int是4个字节，两个int就是8个字节，往后走8个字节，就是你了！</p></blockquote><p>由于C语言是一门编译型的语言，程序所需要的内存应该在编译结束后就确定好。这就是为什么在早期的C语言标准中，不可以使用 int a[n]; 这种写法。可是在实际的使用过程中，一切都是不可确定的，比如这次我需要数组中有20个位置来存放学生的学号，下一次就可能是50个学生。如果都按照有可能出现的上限来分配的话，程序就会非常非常大，内存也是一种有限的资源，我们应该节俭一点才对。这时动态内存管理就出现了。</p><blockquote><p>C 语言为内存的分配和管理提供了几个函数。这些函数可以在 &lt;stdlib.h&gt; 头文件中找到。</p><table><thead><tr><th align="left">序号</th><th align="left">函数和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>void *calloc(int num, int size);</strong> 在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</td></tr><tr><td align="left">2</td><td align="left"><strong>void free(void *address);</strong> 该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</td></tr><tr><td align="left">3</td><td align="left"><strong>void *malloc(int num);</strong> 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td></tr><tr><td align="left">4</td><td align="left"><strong>void *realloc(void *address, int newsize);</strong> 该函数重新分配内存，把内存扩展到 <strong>newsize</strong>。</td></tr></tbody></table></blockquote><p>有了这些内存管理函数，我们初始化数组的方式就有了新的选择：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">6</span>); </span><br><span class="line"><span class="comment">// 基本等价于 int a[6];</span></span><br><span class="line"><span class="comment">// sizeof(int)的返回值为一个int类型变量所需要的空间大小</span></span><br></pre></td></tr></table></figure><p>之前我们使用的初始化数组的方式为静态内存分配，非常死板，不太灵活。但是有了动态内存分配之后，我们就不需要在程序运行前就确定好数据的大小，只需要在创建好一个指针后，利用动态内存分配函数找到一片合适的地方，占山为王，同时把地址返回给a就可以了。当我们需要访问数组a中的第三个元素是，用法和之前一模一样，用a[2]就可以找到了，是不是很方便。</p><blockquote><p>在使用动态内存分配时需要注意，计算机的内存一般是不会自动释放的，当我们不再使用创建好的数组时，应该使用 free(a); 来释放a所代表的数组，将内存空间留给后来有需要的人。毕竟内存是一种很宝贵的资源，去看看淘宝上8G的内存条和8G的U盘价格差多少就大概有个概念了。</p></blockquote><h2 id="一维数组存储二维矩阵"><a href="#一维数组存储二维矩阵" class="headerlink" title="一维数组存储二维矩阵"></a>一维数组存储二维矩阵</h2><p>在平时的印象中，如果我们需要存储一个向量，就会毫不犹豫的选择用一维数组来存，而当我们需要存储一个矩阵时，二维数组看起来是个不错的选择。这时如果想进行动态内存分配，我们应该这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> **A = (<span class="keyword">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> *) * <span class="number">20</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">A[i] = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">30</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line"><span class="built_in">free</span>(A[i]);</span><br><span class="line"><span class="built_in">free</span>(A);</span><br></pre></td></tr></table></figure><blockquote><p>有的同学可能就会说了，这东西看起来就好像挺复杂的，人家静态分配就一句话的事，本来说好的你动态就比人家多一句 free(); 怎么现在还扯上循环了呢？不行不行，不能用动态分配了，我还是提前多分点，不就是内存吗，我还是多掏俩钱吧，省心！</p></blockquote><p>这样看起来好像的确挺麻烦的，可是有些时候我们是真的需要动态内存分配的，矩阵的大小是很难预计的，有的可能是个2*3的小矩阵，而有的则可能是上千万行的行与列的科学矩阵，这可不是有钱任性的时候。聪明的人们就在想，能不能用一维数组来表示矩阵呢？答案是可以的，让我们先来把地方先找好：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *A = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">20</span> *<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>可是这是线性的呀，怎么表示二维的矩阵呢？其实只要地方有了，怎么表示这个问题，总有人可以解决的，这里就用一个矩阵打印函数来说明吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMat</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> <span class="comment">// A是一个m行n列的矩阵</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>,A[i*n + j]); <span class="comment">// 打印第i行第n列的元素</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是相当于把一个二维矩阵，每一行首位相连，就把它们拼成了一个一维数组，在寻址的时候，只需要算好想找的元素在数组的哪一个位置即可。一般来说如果这个矩阵一行有n个元素，A[ i*n + j ] 就代表矩阵中的第i行第j列的元素。</p><p>至此，我们这节课的内容基本就结束啦！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是数据类型？&quot;&gt;&lt;a href=&quot;#什么是数据类型？&quot; class=&quot;headerlink&quot; title=&quot;什么是数据类型？&quot;&gt;&lt;/a&gt;什么是数据类型？&lt;/h2&gt;&lt;p&gt;对于淳朴善良的计算机来说，形形色色的数据并没有什么不同，它只是简单的认识0和1而已。那么，在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Shadowsocks配置日志</title>
    <link href="http://lemonicesprite.com/2020/04/05/Shadowsocks/"/>
    <id>http://lemonicesprite.com/2020/04/05/Shadowsocks/</id>
    <published>2020-04-05T02:35:01.000Z</published>
    <updated>2020-04-05T02:56:46.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h1><p>安装shadowsocks服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks --user</span><br></pre></td></tr></table></figure><p>安装成功后添加环境变量</p><p>编辑 .bashrc 或 .zshrc (具体路径使情况而定)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH&#x3D;&quot;&quot;$PATH:.local&#x2F;bin&quot;</span><br></pre></td></tr></table></figure><p>若能成功展示shadowsocks版本，则安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver --version</span><br></pre></td></tr></table></figure><p>编写shadowsocks配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim shadowsocks.json</span><br></pre></td></tr></table></figure><p>server后改为服务端ip地址 (ifconfig)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;local_address&quot;:&quot;172.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;port_password&quot;: &#123;</span><br><span class="line">&quot;1785&quot;: &quot;12345678&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;rc4-md5&quot;,</span><br><span class="line">&quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务端ssserver服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c shadowsocks.json</span><br></pre></td></tr></table></figure><p>若产生Traceback报错(不一定能解决，有时因为端口被占用)</p><p>更改shadowsocks中的python文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;shadowsocks&#x2F;crypto&#x2F;openssl.py</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s&#x2F;cleanup&#x2F;reset</span><br></pre></td></tr></table></figure><p>再次启动服务即可</p><h1 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h1><p>在GitHub中下载相应版本的Shadowsocks客户端</p><blockquote><p><a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a></p></blockquote><p>添加服务器相关配置(ip,port,password)</p><p>encryption 改为 json 文件中的 rc4-md5</p><p><img src="shadowsocks_preference.jpg" alt="shadowsocks_preference"></p><p>将代理模式设为全局模式(Global)</p><p>大功告成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务端配置&quot;&gt;&lt;a href=&quot;#服务端配置&quot; class=&quot;headerlink&quot; title=&quot;服务端配置&quot;&gt;&lt;/a&gt;服务端配置&lt;/h1&gt;&lt;p&gt;安装shadowsocks服务端&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lemonicesprite.com/2020/01/06/hello-world/"/>
    <id>http://lemonicesprite.com/2020/01/06/hello-world/</id>
    <published>2020-01-06T08:56:37.617Z</published>
    <updated>2020-04-05T02:23:17.783Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
